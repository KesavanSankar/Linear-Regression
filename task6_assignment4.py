# -*- coding: utf-8 -*-
"""Task6 Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WmYLi085QXfbEwhOXh8pzF2Qu4jVKhw3
"""

import numpy as np

"""Import Phi and phi_test from train and test datasets using Numpy's loadtxt function"""

#import phi from train data set
phi = np.loadtxt('/content/train (1).csv', dtype='float',delimiter=',',skiprows=1,
                 usecols=tuple(range(1,14)))

#import phi_test from test data_set
phi_test=np.loadtxt('/content/test (1).csv',dtype='float',delimiter=',',skiprows=1,
                    usecols=tuple(range(1,14)))

phi_test

phi

"""Import y from train dataset using loadtxt function"""

y = np.loadtxt('/content/train (1).csv',dtype='float',delimiter=',',skiprows=1,
               usecols=14,ndmin=2)

y

"""Concatenate column of 1s to right of phi and phi_test"""

phi_test = np.concatenate((phi_test,np.ones((105,1))),axis=1)
phi = np.concatenate((phi,np.ones((400,1))),axis=1)

"""Apply min max scaling on each column of phi and phi_test"""

for i in range(0,13):
  col_max=max(phi[:,i])
  col_min=min(phi[:,i])
  phi[:,i] = (phi[:,i]-col_min) / (col_max - col_min)
  phi_test[:,i]= (phi_test[:,i] - col_min) / (col_max - col_min)

"""Apply log scaling on y


"""

y=np.log(y)

"""Define a function to calculate in error function based on phi,w and p norm"""

def delta_w(p,phi,w):
  if p==2:
    deltaw = (2*(np.dot(np.dot(np.transpose(phi),phi),w)-
                 np.dot(np.transpose(phi),y)) +
              lambd * p* np.power(np.absolute(w),(p-1)))
  if p < 2 and p > 1:
        deltaw = (2 * (np.dot(np.dot(np.transpose(phi), phi), w) -
                       np.dot(np.transpose(phi), y)) +
                  lambd * p * np.power(np.absolute(w), (p - 1)) * np.sign(w))
  return deltaw

"""Make a dictionary containing filenames as keys and p as values"""

filenames = {'output.csv': 2.0,
             'output_p1.csv': 1.75,
             'output_p2.csv': 1.5,
             'output_p3.csv': 1.3
             }

"""For each item in this dictionary:

Set the w to all 0s


"""

for (fname, p) in filenames.items():
    w = np.zeros((14, 1)) # Set initial w to zeros

"""Set an appropriate value for lambda(Hyperparameter) and step size"""

lambd = 0.2 # Hyperparameter lambda value
t = 0.00012 #Max step size

"""Calculate new value of w"""

# Calculate new value of w
w_new = w - t * delta_w(p, phi, w)

"""Repeat steps until error between consecutive ws is less than threshold"""

i = 0 # Repeat steps until error between consecutive w is less than threshold
while(np.linalg.norm(w_new-w) > 10 ** -10):
        w = w_new
        w_new = w - t * delta_w(p, phi, w)
        i = i + 1

"""Load values of id from test data file"""

id_test = np.loadtxt('/content/test (1).csv', dtype='int', delimiter=',',
                         skiprows=1, usecols=0, ndmin=2)
# Load values of id

"""Calculate y for test data using phi test and applying inverse log"""

y_test = np.exp(np.dot(phi_test, w_new)) # Calculate y for test data

"""Save the ids and y according to filename from dictionary"""

# Save the ids and y
np.savetxt(fname, np.concatenate((id_test, y_test), axis=1),
               delimiter=',', fmt=['%d', '%f'], header='ID,MEDV', comments='')